// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should render SelectInput correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <SelectInput
    options={
      Array [
        "option 0",
        "option 1",
        "option 2",
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        undefined,
        <Input
          invalid={false}
          type="select"
          valid={false}
        >
          <option
            value="option 0"
          >
            option 0
          </option>
          <option
            value="option 1"
          >
            option 1
          </option>
          <option
            value="option 2"
          >
            option 2
          </option>
        </Input>,
        undefined,
      ],
      "tag": "div",
    },
    "ref": null,
    "rendered": Array [
      undefined,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <option
              value="option 0"
            >
              option 0
            </option>,
            <option
              value="option 1"
            >
              option 1
            </option>,
            <option
              value="option 2"
            >
              option 2
            </option>,
          ],
          "invalid": false,
          "onChange": undefined,
          "type": "select",
          "valid": false,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "0",
            "nodeType": "host",
            "props": Object {
              "children": "option 0",
              "value": "option 0",
            },
            "ref": null,
            "rendered": "option 0",
            "type": "option",
          },
          Object {
            "instance": null,
            "key": "1",
            "nodeType": "host",
            "props": Object {
              "children": "option 1",
              "value": "option 1",
            },
            "ref": null,
            "rendered": "option 1",
            "type": "option",
          },
          Object {
            "instance": null,
            "key": "2",
            "nodeType": "host",
            "props": Object {
              "children": "option 2",
              "value": "option 2",
            },
            "ref": null,
            "rendered": "option 2",
            "type": "option",
          },
        ],
        "type": [Function],
      },
      undefined,
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          undefined,
          <Input
            invalid={false}
            type="select"
            valid={false}
          >
            <option
              value="option 0"
            >
              option 0
            </option>
            <option
              value="option 1"
            >
              option 1
            </option>
            <option
              value="option 2"
            >
              option 2
            </option>
          </Input>,
          undefined,
        ],
        "tag": "div",
      },
      "ref": null,
      "rendered": Array [
        undefined,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <option
                value="option 0"
              >
                option 0
              </option>,
              <option
                value="option 1"
              >
                option 1
              </option>,
              <option
                value="option 2"
              >
                option 2
              </option>,
            ],
            "invalid": false,
            "onChange": undefined,
            "type": "select",
            "valid": false,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": "0",
              "nodeType": "host",
              "props": Object {
                "children": "option 0",
                "value": "option 0",
              },
              "ref": null,
              "rendered": "option 0",
              "type": "option",
            },
            Object {
              "instance": null,
              "key": "1",
              "nodeType": "host",
              "props": Object {
                "children": "option 1",
                "value": "option 1",
              },
              "ref": null,
              "rendered": "option 1",
              "type": "option",
            },
            Object {
              "instance": null,
              "key": "2",
              "nodeType": "host",
              "props": Object {
                "children": "option 2",
                "value": "option 2",
              },
              "ref": null,
              "rendered": "option 2",
              "type": "option",
            },
          ],
          "type": [Function],
        },
        undefined,
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
